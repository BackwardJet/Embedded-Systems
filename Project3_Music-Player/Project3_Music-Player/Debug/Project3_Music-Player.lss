
Project3_Music-Player.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000827  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d4  00000000  00000000  00000c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065b  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  7a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wait_avr>:
  WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  82:	9c 01       	movw	r18, r24
  TCCR0 = 2;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  88:	86 ef       	ldi	r24, 0xF6	; 246

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  8a:	08 c0       	rjmp	.+16     	; 0x9c <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  8c:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
  8e:	98 b7       	in	r25, 0x38	; 56
  90:	91 60       	ori	r25, 0x01	; 1
  92:	98 bf       	out	0x38, r25	; 56
    WDR();
  94:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
  96:	08 b6       	in	r0, 0x38	; 56
  98:	00 fe       	sbrs	r0, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	31 09       	sbc	r19, r1
  a0:	a8 f7       	brcc	.-22     	; 0x8c <wait_avr+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  a6:	66 23       	and	r22, r22
  a8:	11 f0       	breq	.+4      	; 0xae <output+0x8>
  aa:	c0 9a       	sbi	0x18, 0	; 24
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <output+0xa>
  ae:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
  b0:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
  b2:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  b8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ba:	00 00       	nop
  NOP();
  bc:	00 00       	nop
  NOP();
  be:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
  c0:	c2 98       	cbi	0x18, 2	; 24
  c2:	08 95       	ret

000000c4 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  c4:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
  c6:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  c8:	11 ba       	out	0x11, r1	; 17
  return PIND;
  ca:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  cc:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ce:	00 00       	nop
  NOP();
  d0:	00 00       	nop
  NOP();
  d2:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  d4:	11 ba       	out	0x11, r1	; 17
  return PIND;
  d6:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
  d8:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
  da:	99 23       	and	r25, r25
  dc:	9c f3       	brlt	.-26     	; 0xc4 <write>
  output(c, rs);
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  e2:	08 95       	ret

000000e4 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
  e4:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
  e6:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
  e8:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  wait_avr(5);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  wait_avr(1);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  write(0x3c, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c e3       	ldi	r24, 0x3C	; 60
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x0c, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x06, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x01, 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
 132:	08 95       	ret

00000134 <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 138:	ec 01       	movw	r28, r24
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	31 f0       	breq	.+12     	; 0x150 <puts_lcd2+0x1c>
    write(c, 1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	0e 94 62 00 	call	0xc4	; 0xc4 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 14a:	89 91       	ld	r24, Y+
 14c:	81 11       	cpse	r24, r1
 14e:	fa cf       	rjmp	.-12     	; 0x144 <puts_lcd2+0x10>
    write(c, 1);
  }
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <play_note>:
}



void play_note(int freq, int dur)
{
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
   for(int i = 0; i < (dur); i++)
 162:	16 16       	cp	r1, r22
 164:	17 06       	cpc	r1, r23
 166:	84 f4       	brge	.+32     	; 0x188 <play_note+0x32>
 168:	7b 01       	movw	r14, r22
 16a:	8c 01       	movw	r16, r24
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
   {
      SET_BIT(PORTB,3);
 170:	c3 9a       	sbi	0x18, 3	; 24
      wait_avr(freq);
 172:	c8 01       	movw	r24, r16
 174:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
      CLR_BIT(PORTB,3);
 178:	c3 98       	cbi	0x18, 3	; 24
      wait_avr(freq);
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>



void play_note(int freq, int dur)
{
   for(int i = 0; i < (dur); i++)
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	ce 15       	cp	r28, r14
 184:	df 05       	cpc	r29, r15
 186:	a1 f7       	brne	.-24     	; 0x170 <play_note+0x1a>
      wait_avr(freq);
      CLR_BIT(PORTB,3);
      wait_avr(freq);
   }
   
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <play_music>:

void play_music(struct note *song,int n)
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
   
   for (int i = 0;  i < n; i++)
 1a2:	16 16       	cp	r1, r22
 1a4:	17 06       	cpc	r1, r23
 1a6:	8c f4       	brge	.+34     	; 0x1ca <play_music+0x34>
 1a8:	7b 01       	movw	r14, r22
 1aa:	c8 2f       	mov	r28, r24
 1ac:	d9 2f       	mov	r29, r25
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
   {
      play_note(song[i].freq, song[i].duration);
 1b2:	6a 81       	ldd	r22, Y+2	; 0x02
 1b4:	7b 81       	ldd	r23, Y+3	; 0x03
 1b6:	88 81       	ld	r24, Y
 1b8:	99 81       	ldd	r25, Y+1	; 0x01
 1ba:	0e 94 ab 00 	call	0x156	; 0x156 <play_note>
}

void play_music(struct note *song,int n)
{
   
   for (int i = 0;  i < n; i++)
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	24 96       	adiw	r28, 0x04	; 4
 1c4:	0e 15       	cp	r16, r14
 1c6:	1f 05       	cpc	r17, r15
 1c8:	a1 f7       	brne	.-24     	; 0x1b2 <play_music+0x1c>
   {
      play_note(song[i].freq, song[i].duration);
   }
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <main>:




int main(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	68 97       	sbiw	r28, 0x18	; 24
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
   /* Replace with your application code */
   
   DDRB = 0x01 << 3;
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	87 bb       	out	0x17, r24	; 23
   
   ini_lcd();
 1f0:	0e 94 72 00 	call	0xe4	; 0xe4 <ini_lcd>
   puts_lcd2("PROJECT 3");
 1f4:	88 e7       	ldi	r24, 0x78	; 120
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 9a 00 	call	0x134	; 0x134 <puts_lcd2>
   
   int n_cross = 6;
   
   //hot cross buns: bb aa gggg bb aa gggg g g g g a a a a gg bb aa

   struct note hot_cross_buns[] = {
 1fc:	88 e1       	ldi	r24, 0x18	; 24
 1fe:	e0 e6       	ldi	r30, 0x60	; 96
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	de 01       	movw	r26, r28
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	8a 95       	dec	r24
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x2e>
      {101.2391674,493.88},
         {113.6363636,440},
            {127.5510204,392*2}
   };

   play_music(hot_cross_buns, n_cross);
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 cb 00 	call	0x196	; 0x196 <play_music>

   return 0;

}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	68 96       	adiw	r28, 0x18	; 24
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
