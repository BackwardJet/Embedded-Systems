
Project3_Music-Player.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000400  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5f  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000526  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ec  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006eb  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  7a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wait_avr>:
  WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  82:	9c 01       	movw	r18, r24
  TCCR0 = 2;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  88:	86 ef       	ldi	r24, 0xF6	; 246

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  8a:	08 c0       	rjmp	.+16     	; 0x9c <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
  8c:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
  8e:	98 b7       	in	r25, 0x38	; 56
  90:	91 60       	ori	r25, 0x01	; 1
  92:	98 bf       	out	0x38, r25	; 56
    WDR();
  94:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
  96:	08 b6       	in	r0, 0x38	; 56
  98:	00 fe       	sbrs	r0, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 2;
  while (msec--) {
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	31 09       	sbc	r19, r1
  a0:	a8 f7       	brcc	.-22     	; 0x8c <wait_avr+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <pressed>:
 */ 

#include "keypad.h"
#include "avr.h"

unsigned char pressed(int r, int c) {
  a6:	e8 2f       	mov	r30, r24
	// PUT ALL ROW AND COL PINS TO NO-CONNECT (DDR = 0, PORT = 0)
	// PUT THE r-th ROW TO '0'
	// PUT THE c-th COL to 'Z'
	// GET THE c-th COL (return 0 or 1, depending of PIN's status)
	DDRC = 0;
  a8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  aa:	15 ba       	out	0x15, r1	; 21

	SET_BIT(PORTC,r);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	0e 2e       	mov	r0, r30
  b6:	02 c0       	rjmp	.+4      	; 0xbc <pressed+0x16>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <pressed+0x12>
  c0:	48 2b       	or	r20, r24
  c2:	45 bb       	out	0x15, r20	; 21
	SET_BIT(DDRC,c+4);
  c4:	94 b3       	in	r25, 0x14	; 20
  c6:	6c 5f       	subi	r22, 0xFC	; 252
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pressed+0x2a>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <pressed+0x26>
  d4:	92 2b       	or	r25, r18
  d6:	94 bb       	out	0x14, r25	; 20
	CLR_BIT(PORTC,c+4);
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	20 95       	com	r18
  dc:	29 23       	and	r18, r25
  de:	25 bb       	out	0x15, r18	; 21

	if(!GET_BIT(PINC,r))
  e0:	93 b3       	in	r25, 0x13	; 19
  e2:	89 2f       	mov	r24, r25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <pressed+0x46>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	ea 95       	dec	r30
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <pressed+0x42>
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	82 27       	eor	r24, r18
	return 1;

	return 0;
}
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <get_key>:

unsigned char get_key() {
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	c1 2c       	mov	r12, r1
 10e:	d1 2c       	mov	r13, r1
 110:	16 c0       	rjmp	.+44     	; 0x13e <get_key+0x46>
 112:	fc 2e       	mov	r15, r28
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
			if (pressed(r,c)) {
 114:	be 01       	movw	r22, r28
 116:	c8 01       	movw	r24, r16
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <pressed>
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <get_key+0x34>
 120:	f3 94       	inc	r15
				return (r*4) + c + 1;
 122:	8e 2d       	mov	r24, r14
 124:	88 0f       	add	r24, r24
 126:	88 0f       	add	r24, r24
 128:	8f 0d       	add	r24, r15
 12a:	0d c0       	rjmp	.+26     	; 0x146 <get_key+0x4e>
 12c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 12e:	c4 30       	cpi	r28, 0x04	; 4
 130:	d1 05       	cpc	r29, r1
 132:	79 f7       	brne	.-34     	; 0x112 <get_key+0x1a>
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
 138:	04 30       	cpi	r16, 0x04	; 4
 13a:	11 05       	cpc	r17, r1
 13c:	21 f0       	breq	.+8      	; 0x146 <get_key+0x4e>
 13e:	e0 2e       	mov	r14, r16
	return 1;

	return 0;
}

unsigned char get_key() {
 140:	cc 2d       	mov	r28, r12
 142:	dd 2d       	mov	r29, r13
 144:	e6 cf       	rjmp	.-52     	; 0x112 <get_key+0x1a>
				return (r*4) + c + 1;
			}
		}
	}
	return 0;
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <play_note>:




void play_note(int freq, int dur)
{
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	for(int i = 0; i < (dur); i++)
 164:	16 16       	cp	r1, r22
 166:	17 06       	cpc	r1, r23
 168:	84 f4       	brge	.+32     	; 0x18a <play_note+0x32>
 16a:	7b 01       	movw	r14, r22
 16c:	8c 01       	movw	r16, r24
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SET_BIT(PORTB,3);
 172:	c3 9a       	sbi	0x18, 3	; 24
		wait_avr(freq);
 174:	c8 01       	movw	r24, r16
 176:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
		CLR_BIT(PORTB,3);
 17a:	c3 98       	cbi	0x18, 3	; 24
		wait_avr(freq);
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>



void play_note(int freq, int dur)
{
	for(int i = 0; i < (dur); i++)
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	ce 15       	cp	r28, r14
 186:	df 05       	cpc	r29, r15
 188:	a1 f7       	brne	.-24     	; 0x172 <play_note+0x1a>
		wait_avr(freq);
		CLR_BIT(PORTB,3);
		wait_avr(freq);
	}
	
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <play_music>:

void play_music(struct note *song,int numNotes)
{
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	for (int i = 0;  i < numNotes; i++)
 1a8:	16 16       	cp	r1, r22
 1aa:	17 06       	cpc	r1, r23
 1ac:	14 f5       	brge	.+68     	; 0x1f2 <play_music+0x5a>
 1ae:	6b 01       	movw	r12, r22
 1b0:	c8 2f       	mov	r28, r24
 1b2:	d9 2f       	mov	r29, r25
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <play_music+0x42>
	{
		if ((i > 0) && (song[i].freq == song[i-1].freq)) {
 1ba:	10 16       	cp	r1, r16
 1bc:	11 06       	cpc	r1, r17
 1be:	64 f4       	brge	.+24     	; 0x1d8 <play_music+0x40>
 1c0:	f7 01       	movw	r30, r14
 1c2:	24 81       	ldd	r18, Z+4	; 0x04
 1c4:	35 81       	ldd	r19, Z+5	; 0x05
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <play_music+0x40>
			// int delay = song[i].duration * 0.01;
			wait_avr(5);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
 1d8:	24 96       	adiw	r28, 0x04	; 4
 1da:	7e 01       	movw	r14, r28
		}
		play_note(song[i].freq, song[i].duration);
 1dc:	6a 81       	ldd	r22, Y+2	; 0x02
 1de:	7b 81       	ldd	r23, Y+3	; 0x03
 1e0:	88 81       	ld	r24, Y
 1e2:	99 81       	ldd	r25, Y+1	; 0x01
 1e4:	0e 94 ac 00 	call	0x158	; 0x158 <play_note>
	
}

void play_music(struct note *song,int numNotes)
{
	for (int i = 0;  i < numNotes; i++)
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	0c 15       	cp	r16, r12
 1ee:	1d 05       	cpc	r17, r13
 1f0:	21 f7       	brne	.-56     	; 0x1ba <play_music+0x22>
		}
		play_note(song[i].freq, song[i].duration);
		
		
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	08 95       	ret

00000204 <playHotCrossBuns>:

void playHotCrossBuns() {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	c4 54       	subi	r28, 0x44	; 68
 20e:	d1 09       	sbc	r29, r1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	//hot cross buns: bb aa gggg bb aa gggg g g g g a a a a gg bb aa
	int numNotesCross = 17;

	struct note hot_cross_buns[] = {
 21a:	84 e4       	ldi	r24, 0x44	; 68
 21c:	e0 e6       	ldi	r30, 0x60	; 96
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	de 01       	movw	r26, r28
 222:	11 96       	adiw	r26, 0x01	; 1
 224:	01 90       	ld	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	8a 95       	dec	r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <playHotCrossBuns+0x20>
		{101.2391674,493.88},
		{113.6363636,440},
		{127.5510204,392*2}
	};
	   
	play_music(hot_cross_buns, numNotesCross);
 22c:	61 e1       	ldi	r22, 0x11	; 17
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 cc 00 	call	0x198	; 0x198 <play_music>
}
 238:	cc 5b       	subi	r28, 0xBC	; 188
 23a:	df 4f       	sbci	r29, 0xFF	; 255
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <playABC>:

void playABC() {
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	a0 97       	sbiw	r28, 0x20	; 32
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
	// twinkle twinkle little star (Same as ABC's)
	// c c g g a a g f f e e d d c g g f f e e d c c g g a a g f f e e d d c
	
	int numNotesABC = 8;
	   
	struct note twinkle[] = {
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	20 e2       	ldi	r18, 0x20	; 32
 266:	fc 01       	movw	r30, r24
 268:	11 92       	st	Z+, r1
 26a:	2a 95       	dec	r18
 26c:	e9 f7       	brne	.-6      	; 0x268 <playABC+0x1c>
 26e:	4f e7       	ldi	r20, 0x7F	; 127
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	5a 83       	std	Y+2, r21	; 0x02
 274:	49 83       	std	Y+1, r20	; 0x01
 276:	20 e1       	ldi	r18, 0x10	; 16
 278:	33 e0       	ldi	r19, 0x03	; 3
 27a:	3c 83       	std	Y+4, r19	; 0x04
 27c:	2b 83       	std	Y+3, r18	; 0x03
 27e:	6f e3       	ldi	r22, 0x3F	; 63
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	7e 83       	std	Y+6, r23	; 0x06
 284:	6d 83       	std	Y+5, r22	; 0x05
 286:	2e eb       	ldi	r18, 0xBE	; 190
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3a 87       	std	Y+10, r19	; 0x0a
 28c:	29 87       	std	Y+9, r18	; 0x09
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	3c 87       	std	Y+12, r19	; 0x0c
 294:	2b 87       	std	Y+11, r18	; 0x0b
 296:	7e 87       	std	Y+14, r23	; 0x0e
 298:	6d 87       	std	Y+13, r22	; 0x0d
 29a:	38 8b       	std	Y+16, r19	; 0x10
 29c:	2f 87       	std	Y+15, r18	; 0x0f
 29e:	61 e7       	ldi	r22, 0x71	; 113
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	7a 8b       	std	Y+18, r23	; 0x12
 2a4:	69 8b       	std	Y+17, r22	; 0x11
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	7c 8b       	std	Y+20, r23	; 0x14
 2ac:	6b 8b       	std	Y+19, r22	; 0x13
 2ae:	5e 8b       	std	Y+22, r21	; 0x16
 2b0:	4d 8b       	std	Y+21, r20	; 0x15
 2b2:	78 8f       	std	Y+24, r23	; 0x18
 2b4:	6f 8b       	std	Y+23, r22	; 0x17
 2b6:	6a ea       	ldi	r22, 0xAA	; 170
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	7a 8f       	std	Y+26, r23	; 0x1a
 2bc:	69 8f       	std	Y+25, r22	; 0x19
 2be:	3c 8f       	std	Y+28, r19	; 0x1c
 2c0:	2b 8f       	std	Y+27, r18	; 0x1b
 2c2:	5e 8f       	std	Y+30, r21	; 0x1e
 2c4:	4d 8f       	std	Y+29, r20	; 0x1d
 2c6:	38 a3       	std	Y+32, r19	; 0x20
 2c8:	2f 8f       	std	Y+31, r18	; 0x1f
			   {170.0680272,1},
				   {127.5510204,1}
   };
   
   
   play_music(twinkle, numNotesABC);
 2ca:	68 e0       	ldi	r22, 0x08	; 8
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	0e 94 cc 00 	call	0x198	; 0x198 <play_music>
 2d2:	a0 96       	adiw	r28, 0x20	; 32
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 2e4:	66 23       	and	r22, r22
 2e6:	11 f0       	breq	.+4      	; 0x2ec <output+0x8>
 2e8:	c0 9a       	sbi	0x18, 0	; 24
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <output+0xa>
 2ec:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
 2ee:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
 2f0:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
 2f6:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 2f8:	00 00       	nop
  NOP();
 2fa:	00 00       	nop
  NOP();
 2fc:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
 2fe:	c2 98       	cbi	0x18, 2	; 24
 300:	08 95       	ret

00000302 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 302:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
 304:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 306:	11 ba       	out	0x11, r1	; 17
  return PIND;
 308:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
 30a:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 30c:	00 00       	nop
  NOP();
 30e:	00 00       	nop
  NOP();
 310:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 312:	11 ba       	out	0x11, r1	; 17
  return PIND;
 314:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
 316:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
 318:	99 23       	and	r25, r25
 31a:	9c f3       	brlt	.-26     	; 0x302 <write>
  output(c, rs);
 31c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <output>
 320:	08 95       	ret

00000322 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
 322:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
 324:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
 326:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
 328:	80 e1       	ldi	r24, 0x10	; 16
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	80 e3       	ldi	r24, 0x30	; 48
 334:	0e 94 72 01 	call	0x2e4	; 0x2e4 <output>
  wait_avr(5);
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e3       	ldi	r24, 0x30	; 48
 344:	0e 94 72 01 	call	0x2e4	; 0x2e4 <output>
  wait_avr(1);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  write(0x3c, 0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8c e3       	ldi	r24, 0x3C	; 60
 354:	0e 94 81 01 	call	0x302	; 0x302 <write>
  write(0x0c, 0);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	8c e0       	ldi	r24, 0x0C	; 12
 35c:	0e 94 81 01 	call	0x302	; 0x302 <write>
  write(0x06, 0);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 81 01 	call	0x302	; 0x302 <write>
  write(0x01, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 81 01 	call	0x302	; 0x302 <write>
 370:	08 95       	ret

00000372 <pos_lcd>:
  write(0x01, 0);
}

void
pos_lcd(unsigned char r, unsigned char c)
{
 372:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
 374:	c6 2f       	mov	r28, r22
 376:	98 e2       	ldi	r25, 0x28	; 40
 378:	89 9f       	mul	r24, r25
 37a:	c0 0d       	add	r28, r0
 37c:	11 24       	eor	r1, r1
  write(0x02, 0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 81 01 	call	0x302	; 0x302 <write>
  while (n--) {
 386:	cc 23       	and	r28, r28
 388:	31 f0       	breq	.+12     	; 0x396 <pos_lcd+0x24>
    write(0x14, 0);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	84 e1       	ldi	r24, 0x14	; 20
 38e:	0e 94 81 01 	call	0x302	; 0x302 <write>
 392:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 394:	d1 f7       	brne	.-12     	; 0x38a <pos_lcd+0x18>
    write(0x14, 0);
  }
}
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 39e:	ec 01       	movw	r28, r24
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	88 23       	and	r24, r24
 3a8:	31 f0       	breq	.+12     	; 0x3b6 <puts_lcd2+0x1c>
    write(c, 1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	0e 94 81 01 	call	0x302	; 0x302 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 3b0:	89 91       	ld	r24, Y+
 3b2:	81 11       	cpse	r24, r1
 3b4:	fa cf       	rjmp	.-12     	; 0x3aa <puts_lcd2+0x10>
    write(c, 1);
  }
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <main>:

int main(void)
{
   /* Replace with your application code */
   
   DDRB = 0x01 << 3;
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	87 bb       	out	0x17, r24	; 23
   
   ini_lcd();
 3c0:	0e 94 91 01 	call	0x322	; 0x322 <ini_lcd>
   pos_lcd(0,0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 b9 01 	call	0x372	; 0x372 <pos_lcd>
   puts_lcd2("1:Hot Cross Buns");
 3cc:	84 ea       	ldi	r24, 0xA4	; 164
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 cd 01 	call	0x39a	; 0x39a <puts_lcd2>
   pos_lcd(1,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 b9 01 	call	0x372	; 0x372 <pos_lcd>
   puts_lcd2("2:ABC's");
 3dc:	85 eb       	ldi	r24, 0xB5	; 181
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 cd 01 	call	0x39a	; 0x39a <puts_lcd2>
   //LCD CAN HAVE 16 CHARACTERS
   
	for (;;) {
		unsigned char key = get_key();
 3e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_key>
		if (key == 1) {
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <main+0x36>
			playHotCrossBuns();
 3ec:	0e 94 02 01 	call	0x204	; 0x204 <playHotCrossBuns>
 3f0:	f9 cf       	rjmp	.-14     	; 0x3e4 <main+0x28>
		}
		if (key == 2) {
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <main+0x28>
			playABC();
 3f6:	0e 94 26 01 	call	0x24c	; 0x24c <playABC>
 3fa:	f4 cf       	rjmp	.-24     	; 0x3e4 <main+0x28>

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
