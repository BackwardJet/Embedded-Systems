
Project4_Volt-Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090f  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000438  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000429  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000279  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000511  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  7a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wait_avr>:
	WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  82:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  88:	83 e8       	ldi	r24, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  8a:	08 c0       	rjmp	.+16     	; 0x9c <wait_avr+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  8c:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  8e:	98 b7       	in	r25, 0x38	; 56
  90:	91 60       	ori	r25, 0x01	; 1
  92:	98 bf       	out	0x38, r25	; 56
		WDR();
  94:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  96:	08 b6       	in	r0, 0x38	; 56
  98:	00 fe       	sbrs	r0, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	31 09       	sbc	r19, r1
  a0:	a8 f7       	brcc	.-22     	; 0x8c <wait_avr+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <pressed>:
 */ 

#include "keypad.h"
#include "avr.h"

unsigned char pressed(int r, int c) {
  a6:	e8 2f       	mov	r30, r24
	// PUT ALL ROW AND COL PINS TO NO-CONNECT (DDR = 0, PORT = 0)
	// PUT THE r-th ROW TO '0'
	// PUT THE c-th COL to 'Z'
	// GET THE c-th COL (return 0 or 1, depending of PIN's status)
	DDRC = 0;
  a8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
  aa:	15 ba       	out	0x15, r1	; 21

	SET_BIT(PORTC,r);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	0e 2e       	mov	r0, r30
  b6:	02 c0       	rjmp	.+4      	; 0xbc <pressed+0x16>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <pressed+0x12>
  c0:	48 2b       	or	r20, r24
  c2:	45 bb       	out	0x15, r20	; 21
	SET_BIT(DDRC,c+4);
  c4:	94 b3       	in	r25, 0x14	; 20
  c6:	6c 5f       	subi	r22, 0xFC	; 252
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <pressed+0x2a>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <pressed+0x26>
  d4:	92 2b       	or	r25, r18
  d6:	94 bb       	out	0x14, r25	; 20
	CLR_BIT(PORTC,c+4);
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	20 95       	com	r18
  dc:	29 23       	and	r18, r25
  de:	25 bb       	out	0x15, r18	; 21

	if(!GET_BIT(PINC,r))
  e0:	93 b3       	in	r25, 0x13	; 19
  e2:	89 2f       	mov	r24, r25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <pressed+0x46>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	ea 95       	dec	r30
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <pressed+0x42>
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	82 27       	eor	r24, r18
	return 1;

	return 0;
}
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <get_key>:

unsigned char get_key() {
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	c1 2c       	mov	r12, r1
 10e:	d1 2c       	mov	r13, r1
 110:	16 c0       	rjmp	.+44     	; 0x13e <get_key+0x46>
 112:	fc 2e       	mov	r15, r28
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
			if (pressed(r,c)) {
 114:	be 01       	movw	r22, r28
 116:	c8 01       	movw	r24, r16
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <pressed>
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <get_key+0x34>
 120:	f3 94       	inc	r15
				return (r*4) + c + 1;
 122:	8e 2d       	mov	r24, r14
 124:	88 0f       	add	r24, r24
 126:	88 0f       	add	r24, r24
 128:	8f 0d       	add	r24, r15
 12a:	0d c0       	rjmp	.+26     	; 0x146 <get_key+0x4e>
 12c:	21 96       	adiw	r28, 0x01	; 1
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 12e:	c4 30       	cpi	r28, 0x04	; 4
 130:	d1 05       	cpc	r29, r1
 132:	79 f7       	brne	.-34     	; 0x112 <get_key+0x1a>
 134:	0f 5f       	subi	r16, 0xFF	; 255
 136:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

unsigned char get_key() {
	unsigned char r,c;
	for (r = 0; r < 4; ++r) {
 138:	04 30       	cpi	r16, 0x04	; 4
 13a:	11 05       	cpc	r17, r1
 13c:	21 f0       	breq	.+8      	; 0x146 <get_key+0x4e>
 13e:	e0 2e       	mov	r14, r16
	return 1;

	return 0;
}

unsigned char get_key() {
 140:	cc 2d       	mov	r28, r12
 142:	dd 2d       	mov	r29, r13
 144:	e6 cf       	rjmp	.-52     	; 0x112 <get_key+0x1a>
				return (r*4) + c + 1;
			}
		}
	}
	return 0;
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 158:	66 23       	and	r22, r22
 15a:	11 f0       	breq	.+4      	; 0x160 <output+0x8>
 15c:	c0 9a       	sbi	0x18, 0	; 24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <output+0xa>
 160:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
 162:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
 164:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
 16a:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 16c:	00 00       	nop
  NOP();
 16e:	00 00       	nop
  NOP();
 170:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
 172:	c2 98       	cbi	0x18, 2	; 24
 174:	08 95       	ret

00000176 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
 176:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
 178:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 17a:	11 ba       	out	0x11, r1	; 17
  return PIND;
 17c:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
 17e:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
 180:	00 00       	nop
  NOP();
 182:	00 00       	nop
  NOP();
 184:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
 186:	11 ba       	out	0x11, r1	; 17
  return PIND;
 188:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
 18a:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
 18c:	99 23       	and	r25, r25
 18e:	9c f3       	brlt	.-26     	; 0x176 <write>
  output(c, rs);
 190:	0e 94 ac 00 	call	0x158	; 0x158 <output>
 194:	08 95       	ret

00000196 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
 196:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
 198:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
 19a:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 ac 00 	call	0x158	; 0x158 <output>
  wait_avr(5);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	0e 94 ac 00 	call	0x158	; 0x158 <output>
  wait_avr(1);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  write(0x3c, 0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	8c e3       	ldi	r24, 0x3C	; 60
 1c8:	0e 94 bb 00 	call	0x176	; 0x176 <write>
  write(0x0c, 0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	0e 94 bb 00 	call	0x176	; 0x176 <write>
  write(0x06, 0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 bb 00 	call	0x176	; 0x176 <write>
  write(0x01, 0);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 bb 00 	call	0x176	; 0x176 <write>
 1e4:	08 95       	ret

000001e6 <clr_lcd>:
}

void
clr_lcd(void)
{
  write(0x01, 0);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 bb 00 	call	0x176	; 0x176 <write>
 1ee:	08 95       	ret

000001f0 <pos_lcd>:
}

void
pos_lcd(unsigned char r, unsigned char c)
{
 1f0:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
 1f2:	c6 2f       	mov	r28, r22
 1f4:	98 e2       	ldi	r25, 0x28	; 40
 1f6:	89 9f       	mul	r24, r25
 1f8:	c0 0d       	add	r28, r0
 1fa:	11 24       	eor	r1, r1
  write(0x02, 0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 bb 00 	call	0x176	; 0x176 <write>
  while (n--) {
 204:	cc 23       	and	r28, r28
 206:	31 f0       	breq	.+12     	; 0x214 <pos_lcd+0x24>
    write(0x14, 0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	0e 94 bb 00 	call	0x176	; 0x176 <write>
 210:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 212:	d1 f7       	brne	.-12     	; 0x208 <pos_lcd+0x18>
    write(0x14, 0);
  }
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <puts_lcd2>:
  }
}

void
puts_lcd2(const char *s)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 21c:	ec 01       	movw	r28, r24
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	fc 01       	movw	r30, r24
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	31 f0       	breq	.+12     	; 0x234 <puts_lcd2+0x1c>
    write(c, 1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	0e 94 bb 00 	call	0x176	; 0x176 <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 22e:	89 91       	ld	r24, Y+
 230:	81 11       	cpse	r24, r1
 232:	fa cf       	rjmp	.-12     	; 0x228 <puts_lcd2+0x10>
    write(c, 1);
  }
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <set_lcd_lines>:

void set_lcd_lines(const char *line1,const char *line2) {
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	8c 01       	movw	r16, r24
 244:	eb 01       	movw	r28, r22
	pos_lcd(0,0);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <pos_lcd>
	puts_lcd2(line1);
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 0c 01 	call	0x218	; 0x218 <puts_lcd2>
	pos_lcd(1,0);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <pos_lcd>
	puts_lcd2(line2);
 25c:	ce 01       	movw	r24, r28
 25e:	0e 94 0c 01 	call	0x218	; 0x218 <puts_lcd2>
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <main>:
#include <stdio.h>


int main(void)
{
	ini_lcd();
 26c:	0e 94 cb 00 	call	0x196	; 0x196 <ini_lcd>

	init_registers();
 270:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_registers>
	puts_lcd2("1:Begin Sampling");
	pos_lcd(1,0);
	puts_lcd2("2:Restart");
	*/
	
	set_lcd_lines("1:Begin Sampling", "2:Restart");
 274:	60 e6       	ldi	r22, 0x60	; 96
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	8a e6       	ldi	r24, 0x6A	; 106
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 1d 01 	call	0x23a	; 0x23a <set_lcd_lines>
	
	for (;;) {
		unsigned char key = get_key();
 280:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_key>
		if (key == 1) {
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	59 f4       	brne	.+22     	; 0x29e <main+0x32>
			// start sampling
			clr_lcd();
 288:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <clr_lcd>
			puts_lcd2("key 1 pressed");
 28c:	8b e7       	ldi	r24, 0x7B	; 123
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 0c 01 	call	0x218	; 0x218 <puts_lcd2>
			while (1) {
				wait_avr(500);
 294:	84 ef       	ldi	r24, 0xF4	; 244
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
			}
 29c:	fb cf       	rjmp	.-10     	; 0x294 <main+0x28>
		}
		if (key == 2) {
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	79 f7       	brne	.-34     	; 0x280 <main+0x14>
			// reset
			clr_lcd();
 2a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <clr_lcd>
			puts_lcd2("key 2 pressed");
 2a6:	89 e8       	ldi	r24, 0x89	; 137
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 0c 01 	call	0x218	; 0x218 <puts_lcd2>
 2ae:	e8 cf       	rjmp	.-48     	; 0x280 <main+0x14>

000002b0 <init_registers>:
void init_registers() {
	// SET_BIT(ADMUX,1);
	// SET_BIT(ADMUX,6);
	
	// ADMUX = (1 << 6) | (1 << 1) | (1 << 0);
	ADMUX = (1 << REFS0);
 2b0:	80 e4       	ldi	r24, 0x40	; 64
 2b2:	87 b9       	out	0x07, r24	; 7
	// ADMUX = (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
	
	
	ADCSRA = (1 << ADEN) | (1 << ADSC);
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	86 b9       	out	0x06, r24	; 6
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
